// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.15.8
// source: pkg/driver/proto/driver.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_driver_proto_driver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_driver_proto_driver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_pkg_driver_proto_driver_proto_rawDescGZIP(), []int{0}
}

type StartVMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VmId              string              `protobuf:"bytes,1,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	VcpuCount         int64               `protobuf:"varint,2,opt,name=vcpu_count,json=vcpuCount,proto3" json:"vcpu_count,omitempty"`
	Memory            int64               `protobuf:"varint,3,opt,name=memory,proto3" json:"memory,omitempty"`
	InitFileSystem    string              `protobuf:"bytes,4,opt,name=init_file_system,json=initFileSystem,proto3" json:"init_file_system,omitempty"`
	RootFileSystem    string              `protobuf:"bytes,5,opt,name=root_file_system,json=rootFileSystem,proto3" json:"root_file_system,omitempty"`
	Kernel            string              `protobuf:"bytes,6,opt,name=kernel,proto3" json:"kernel,omitempty"`
	KernelArgs        string              `protobuf:"bytes,7,opt,name=kernel_args,json=kernelArgs,proto3" json:"kernel_args,omitempty"`
	Drives            []*Drive            `protobuf:"bytes,8,rep,name=drives,proto3" json:"drives,omitempty"`
	NetworkInterfaces []*NetworkInterface `protobuf:"bytes,9,rep,name=network_interfaces,json=networkInterfaces,proto3" json:"network_interfaces,omitempty"`
}

func (x *StartVMRequest) Reset() {
	*x = StartVMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_driver_proto_driver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartVMRequest) ProtoMessage() {}

func (x *StartVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_driver_proto_driver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartVMRequest.ProtoReflect.Descriptor instead.
func (*StartVMRequest) Descriptor() ([]byte, []int) {
	return file_pkg_driver_proto_driver_proto_rawDescGZIP(), []int{1}
}

func (x *StartVMRequest) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

func (x *StartVMRequest) GetVcpuCount() int64 {
	if x != nil {
		return x.VcpuCount
	}
	return 0
}

func (x *StartVMRequest) GetMemory() int64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *StartVMRequest) GetInitFileSystem() string {
	if x != nil {
		return x.InitFileSystem
	}
	return ""
}

func (x *StartVMRequest) GetRootFileSystem() string {
	if x != nil {
		return x.RootFileSystem
	}
	return ""
}

func (x *StartVMRequest) GetKernel() string {
	if x != nil {
		return x.Kernel
	}
	return ""
}

func (x *StartVMRequest) GetKernelArgs() string {
	if x != nil {
		return x.KernelArgs
	}
	return ""
}

func (x *StartVMRequest) GetDrives() []*Drive {
	if x != nil {
		return x.Drives
	}
	return nil
}

func (x *StartVMRequest) GetNetworkInterfaces() []*NetworkInterface {
	if x != nil {
		return x.NetworkInterfaces
	}
	return nil
}

type StartVMResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid    string `protobuf:"bytes,2,opt,name=pid,proto3" json:"pid,omitempty"`
	Serial string `protobuf:"bytes,3,opt,name=serial,proto3" json:"serial,omitempty"`
}

func (x *StartVMResponse) Reset() {
	*x = StartVMResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_driver_proto_driver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartVMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartVMResponse) ProtoMessage() {}

func (x *StartVMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_driver_proto_driver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartVMResponse.ProtoReflect.Descriptor instead.
func (*StartVMResponse) Descriptor() ([]byte, []int) {
	return file_pkg_driver_proto_driver_proto_rawDescGZIP(), []int{2}
}

func (x *StartVMResponse) GetPid() string {
	if x != nil {
		return x.Pid
	}
	return ""
}

func (x *StartVMResponse) GetSerial() string {
	if x != nil {
		return x.Serial
	}
	return ""
}

type StopVMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VmId string `protobuf:"bytes,1,opt,name=vmId,proto3" json:"vmId,omitempty"`
}

func (x *StopVMRequest) Reset() {
	*x = StopVMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_driver_proto_driver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopVMRequest) ProtoMessage() {}

func (x *StopVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_driver_proto_driver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopVMRequest.ProtoReflect.Descriptor instead.
func (*StopVMRequest) Descriptor() ([]byte, []int) {
	return file_pkg_driver_proto_driver_proto_rawDescGZIP(), []int{3}
}

func (x *StopVMRequest) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

type NetworkInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MacAddress      string           `protobuf:"bytes,1,opt,name=macAddress,proto3" json:"macAddress,omitempty"`
	HostDevName     string           `protobuf:"bytes,2,opt,name=hostDevName,proto3" json:"hostDevName,omitempty"`
	IpConfiguration *IPConfiguration `protobuf:"bytes,3,opt,name=ip_configuration,json=ipConfiguration,proto3" json:"ip_configuration,omitempty"`
}

func (x *NetworkInterface) Reset() {
	*x = NetworkInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_driver_proto_driver_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInterface) ProtoMessage() {}

func (x *NetworkInterface) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_driver_proto_driver_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInterface.ProtoReflect.Descriptor instead.
func (*NetworkInterface) Descriptor() ([]byte, []int) {
	return file_pkg_driver_proto_driver_proto_rawDescGZIP(), []int{4}
}

func (x *NetworkInterface) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *NetworkInterface) GetHostDevName() string {
	if x != nil {
		return x.HostDevName
	}
	return ""
}

func (x *NetworkInterface) GetIpConfiguration() *IPConfiguration {
	if x != nil {
		return x.IpConfiguration
	}
	return nil
}

type IPConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddr      *IPNet   `protobuf:"bytes,1,opt,name=ip_addr,json=ipAddr,proto3" json:"ip_addr,omitempty"`
	Gateway     []byte   `protobuf:"bytes,2,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Nameservers []string `protobuf:"bytes,3,rep,name=nameservers,proto3" json:"nameservers,omitempty"`
	IfName      string   `protobuf:"bytes,4,opt,name=ifName,proto3" json:"ifName,omitempty"`
}

func (x *IPConfiguration) Reset() {
	*x = IPConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_driver_proto_driver_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPConfiguration) ProtoMessage() {}

func (x *IPConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_driver_proto_driver_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPConfiguration.ProtoReflect.Descriptor instead.
func (*IPConfiguration) Descriptor() ([]byte, []int) {
	return file_pkg_driver_proto_driver_proto_rawDescGZIP(), []int{5}
}

func (x *IPConfiguration) GetIpAddr() *IPNet {
	if x != nil {
		return x.IpAddr
	}
	return nil
}

func (x *IPConfiguration) GetGateway() []byte {
	if x != nil {
		return x.Gateway
	}
	return nil
}

func (x *IPConfiguration) GetNameservers() []string {
	if x != nil {
		return x.Nameservers
	}
	return nil
}

func (x *IPConfiguration) GetIfName() string {
	if x != nil {
		return x.IfName
	}
	return ""
}

type IPNet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   []byte `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Mask []byte `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
}

func (x *IPNet) Reset() {
	*x = IPNet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_driver_proto_driver_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPNet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPNet) ProtoMessage() {}

func (x *IPNet) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_driver_proto_driver_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPNet.ProtoReflect.Descriptor instead.
func (*IPNet) Descriptor() ([]byte, []int) {
	return file_pkg_driver_proto_driver_proto_rawDescGZIP(), []int{6}
}

func (x *IPNet) GetIp() []byte {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *IPNet) GetMask() []byte {
	if x != nil {
		return x.Mask
	}
	return nil
}

type Drive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DriveId         string `protobuf:"bytes,1,opt,name=drive_id,json=driveId,proto3" json:"drive_id,omitempty"`
	DrivePathOnHost string `protobuf:"bytes,2,opt,name=drive_path_on_host,json=drivePathOnHost,proto3" json:"drive_path_on_host,omitempty"`
	IsRoot          bool   `protobuf:"varint,3,opt,name=is_root,json=isRoot,proto3" json:"is_root,omitempty"`
	IsReadOnly      bool   `protobuf:"varint,4,opt,name=is_read_only,json=isReadOnly,proto3" json:"is_read_only,omitempty"`
}

func (x *Drive) Reset() {
	*x = Drive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_driver_proto_driver_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Drive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Drive) ProtoMessage() {}

func (x *Drive) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_driver_proto_driver_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Drive.ProtoReflect.Descriptor instead.
func (*Drive) Descriptor() ([]byte, []int) {
	return file_pkg_driver_proto_driver_proto_rawDescGZIP(), []int{7}
}

func (x *Drive) GetDriveId() string {
	if x != nil {
		return x.DriveId
	}
	return ""
}

func (x *Drive) GetDrivePathOnHost() string {
	if x != nil {
		return x.DrivePathOnHost
	}
	return ""
}

func (x *Drive) GetIsRoot() bool {
	if x != nil {
		return x.IsRoot
	}
	return false
}

func (x *Drive) GetIsReadOnly() bool {
	if x != nil {
		return x.IsReadOnly
	}
	return false
}

var File_pkg_driver_proto_driver_proto protoreflect.FileDescriptor

var file_pkg_driver_proto_driver_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x70, 0x6b, 0x67, 0x2f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0xd7, 0x02, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x76, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x76, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x63, 0x70, 0x75, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x76, 0x63, 0x70,
	0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x28,
	0x0a, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x6f, 0x6f, 0x74,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x72, 0x6f, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x65,
	0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x41, 0x72, 0x67, 0x73, 0x12, 0x24, 0x0a, 0x06, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x73, 0x12, 0x46, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x22, 0x3b, 0x0a, 0x0f, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x56, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x22, 0x23, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x4d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6d, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x6d, 0x49, 0x64, 0x22, 0x97, 0x01, 0x0a, 0x10,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x76, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x41, 0x0a, 0x10, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x69, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8c, 0x01, 0x0a, 0x0f, 0x49, 0x50, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x07, 0x69, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x50, 0x4e, 0x65, 0x74, 0x52, 0x06, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x66,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2b, 0x0a, 0x05, 0x49, 0x50, 0x4e, 0x65, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6d, 0x61, 0x73,
	0x6b, 0x22, 0x8a, 0x01, 0x0a, 0x05, 0x44, 0x72, 0x69, 0x76, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x64, 0x72, 0x69, 0x76, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x5f, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x4f, 0x6e, 0x48,
	0x6f, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x20, 0x0a, 0x0c,
	0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x32, 0x75,
	0x0a, 0x0b, 0x52, 0x61, 0x76, 0x65, 0x6c, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x38, 0x0a,
	0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x4d, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x4d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x53, 0x74, 0x6f, 0x70, 0x56,
	0x4d, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x4d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x61, 0x6c, 0x79, 0x65, 0x6e, 0x74, 0x64, 0x65, 0x76, 0x2f, 0x72,
	0x61, 0x76, 0x65, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_driver_proto_driver_proto_rawDescOnce sync.Once
	file_pkg_driver_proto_driver_proto_rawDescData = file_pkg_driver_proto_driver_proto_rawDesc
)

func file_pkg_driver_proto_driver_proto_rawDescGZIP() []byte {
	file_pkg_driver_proto_driver_proto_rawDescOnce.Do(func() {
		file_pkg_driver_proto_driver_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_driver_proto_driver_proto_rawDescData)
	})
	return file_pkg_driver_proto_driver_proto_rawDescData
}

var file_pkg_driver_proto_driver_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_pkg_driver_proto_driver_proto_goTypes = []interface{}{
	(*Empty)(nil),            // 0: proto.Empty
	(*StartVMRequest)(nil),   // 1: proto.StartVMRequest
	(*StartVMResponse)(nil),  // 2: proto.StartVMResponse
	(*StopVMRequest)(nil),    // 3: proto.StopVMRequest
	(*NetworkInterface)(nil), // 4: proto.NetworkInterface
	(*IPConfiguration)(nil),  // 5: proto.IPConfiguration
	(*IPNet)(nil),            // 6: proto.IPNet
	(*Drive)(nil),            // 7: proto.Drive
}
var file_pkg_driver_proto_driver_proto_depIdxs = []int32{
	7, // 0: proto.StartVMRequest.drives:type_name -> proto.Drive
	4, // 1: proto.StartVMRequest.network_interfaces:type_name -> proto.NetworkInterface
	5, // 2: proto.NetworkInterface.ip_configuration:type_name -> proto.IPConfiguration
	6, // 3: proto.IPConfiguration.ip_addr:type_name -> proto.IPNet
	1, // 4: proto.RavelDriver.StartVM:input_type -> proto.StartVMRequest
	3, // 5: proto.RavelDriver.StopVM:input_type -> proto.StopVMRequest
	2, // 6: proto.RavelDriver.StartVM:output_type -> proto.StartVMResponse
	0, // 7: proto.RavelDriver.StopVM:output_type -> proto.Empty
	6, // [6:8] is the sub-list for method output_type
	4, // [4:6] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_pkg_driver_proto_driver_proto_init() }
func file_pkg_driver_proto_driver_proto_init() {
	if File_pkg_driver_proto_driver_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_driver_proto_driver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_driver_proto_driver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartVMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_driver_proto_driver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartVMResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_driver_proto_driver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopVMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_driver_proto_driver_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_driver_proto_driver_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_driver_proto_driver_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPNet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_driver_proto_driver_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Drive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_driver_proto_driver_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_driver_proto_driver_proto_goTypes,
		DependencyIndexes: file_pkg_driver_proto_driver_proto_depIdxs,
		MessageInfos:      file_pkg_driver_proto_driver_proto_msgTypes,
	}.Build()
	File_pkg_driver_proto_driver_proto = out.File
	file_pkg_driver_proto_driver_proto_rawDesc = nil
	file_pkg_driver_proto_driver_proto_goTypes = nil
	file_pkg_driver_proto_driver_proto_depIdxs = nil
}
