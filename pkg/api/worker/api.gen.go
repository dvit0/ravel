// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// Defines values for RavelMachineStatus.
const (
	Error    RavelMachineStatus = "error"
	Running  RavelMachineStatus = "running"
	Starting RavelMachineStatus = "starting"
	Stopped  RavelMachineStatus = "stopped"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Message *string `json:"message,omitempty"`
}

// RavelMachine defines model for RavelMachine.
type RavelMachine struct {
	// Id Machine unique identifier
	Id string `json:"id"`

	// InitDriveId Initial drive identifier for the machine
	InitDriveId string `json:"init_drive_id"`

	// RootDriveId Root drive identifier for the machine
	RootDriveId string           `json:"root_drive_id"`
	Spec        RavelMachineSpec `json:"spec"`

	// Status Status of the machine
	Status RavelMachineStatus `json:"status"`
}

// RavelMachineSpec defines model for RavelMachineSpec.
type RavelMachineSpec struct {
	// Image Image used by the machine
	Image string `json:"image"`

	// Memory Memory size in MB
	Memory int64 `json:"memory"`

	// Vcpus Number of virtual CPUs
	Vcpus int64 `json:"vcpus"`
}

// RavelMachineStatus Status of the machine
type RavelMachineStatus string

// CreateMachineJSONRequestBody defines body for CreateMachine for application/json ContentType.
type CreateMachineJSONRequestBody = RavelMachineSpec

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ExitWorker request
	ExitWorker(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListMachines request
	ListMachines(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateMachineWithBody request with any body
	CreateMachineWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateMachine(ctx context.Context, body CreateMachineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMachine request
	DeleteMachine(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMachine request
	GetMachine(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StartMachine request
	StartMachine(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StopMachine request
	StopMachine(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ExitWorker(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExitWorkerRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListMachines(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListMachinesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMachineWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMachineRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMachine(ctx context.Context, body CreateMachineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMachineRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMachine(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMachineRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMachine(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMachineRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartMachine(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartMachineRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StopMachine(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStopMachineRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewExitWorkerRequest generates requests for ExitWorker
func NewExitWorkerRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/exit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListMachinesRequest generates requests for ListMachines
func NewListMachinesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/machines")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateMachineRequest calls the generic CreateMachine builder with application/json body
func NewCreateMachineRequest(server string, body CreateMachineJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateMachineRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateMachineRequestWithBody generates requests for CreateMachine with any type of body
func NewCreateMachineRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/machines")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteMachineRequest generates requests for DeleteMachine
func NewDeleteMachineRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/machines/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMachineRequest generates requests for GetMachine
func NewGetMachineRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/machines/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStartMachineRequest generates requests for StartMachine
func NewStartMachineRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/machines/%s/start", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStopMachineRequest generates requests for StopMachine
func NewStopMachineRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/machines/%s/stop", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ExitWorkerWithResponse request
	ExitWorkerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ExitWorkerResponse, error)

	// ListMachinesWithResponse request
	ListMachinesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListMachinesResponse, error)

	// CreateMachineWithBodyWithResponse request with any body
	CreateMachineWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMachineResponse, error)

	CreateMachineWithResponse(ctx context.Context, body CreateMachineJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMachineResponse, error)

	// DeleteMachineWithResponse request
	DeleteMachineWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteMachineResponse, error)

	// GetMachineWithResponse request
	GetMachineWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetMachineResponse, error)

	// StartMachineWithResponse request
	StartMachineWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*StartMachineResponse, error)

	// StopMachineWithResponse request
	StopMachineWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*StopMachineResponse, error)
}

type ExitWorkerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ExitWorkerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExitWorkerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListMachinesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Machines *[]RavelMachine `json:"machines,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListMachinesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListMachinesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateMachineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		MachineId *string `json:"machineId,omitempty"`
	}
	JSON400 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateMachineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateMachineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMachineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteMachineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMachineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMachineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RavelMachine
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetMachineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMachineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StartMachineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r StartMachineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StartMachineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StopMachineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r StopMachineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StopMachineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ExitWorkerWithResponse request returning *ExitWorkerResponse
func (c *ClientWithResponses) ExitWorkerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ExitWorkerResponse, error) {
	rsp, err := c.ExitWorker(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExitWorkerResponse(rsp)
}

// ListMachinesWithResponse request returning *ListMachinesResponse
func (c *ClientWithResponses) ListMachinesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListMachinesResponse, error) {
	rsp, err := c.ListMachines(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListMachinesResponse(rsp)
}

// CreateMachineWithBodyWithResponse request with arbitrary body returning *CreateMachineResponse
func (c *ClientWithResponses) CreateMachineWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMachineResponse, error) {
	rsp, err := c.CreateMachineWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMachineResponse(rsp)
}

func (c *ClientWithResponses) CreateMachineWithResponse(ctx context.Context, body CreateMachineJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMachineResponse, error) {
	rsp, err := c.CreateMachine(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMachineResponse(rsp)
}

// DeleteMachineWithResponse request returning *DeleteMachineResponse
func (c *ClientWithResponses) DeleteMachineWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteMachineResponse, error) {
	rsp, err := c.DeleteMachine(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMachineResponse(rsp)
}

// GetMachineWithResponse request returning *GetMachineResponse
func (c *ClientWithResponses) GetMachineWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetMachineResponse, error) {
	rsp, err := c.GetMachine(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMachineResponse(rsp)
}

// StartMachineWithResponse request returning *StartMachineResponse
func (c *ClientWithResponses) StartMachineWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*StartMachineResponse, error) {
	rsp, err := c.StartMachine(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartMachineResponse(rsp)
}

// StopMachineWithResponse request returning *StopMachineResponse
func (c *ClientWithResponses) StopMachineWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*StopMachineResponse, error) {
	rsp, err := c.StopMachine(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStopMachineResponse(rsp)
}

// ParseExitWorkerResponse parses an HTTP response from a ExitWorkerWithResponse call
func ParseExitWorkerResponse(rsp *http.Response) (*ExitWorkerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExitWorkerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListMachinesResponse parses an HTTP response from a ListMachinesWithResponse call
func ParseListMachinesResponse(rsp *http.Response) (*ListMachinesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListMachinesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Machines *[]RavelMachine `json:"machines,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateMachineResponse parses an HTTP response from a CreateMachineWithResponse call
func ParseCreateMachineResponse(rsp *http.Response) (*CreateMachineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateMachineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			MachineId *string `json:"machineId,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteMachineResponse parses an HTTP response from a DeleteMachineWithResponse call
func ParseDeleteMachineResponse(rsp *http.Response) (*DeleteMachineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMachineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetMachineResponse parses an HTTP response from a GetMachineWithResponse call
func ParseGetMachineResponse(rsp *http.Response) (*GetMachineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMachineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RavelMachine
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseStartMachineResponse parses an HTTP response from a StartMachineWithResponse call
func ParseStartMachineResponse(rsp *http.Response) (*StartMachineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StartMachineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseStopMachineResponse parses an HTTP response from a StopMachineWithResponse call
func ParseStopMachineResponse(rsp *http.Response) (*StopMachineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StopMachineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Exit worker
	// (POST /api/v1/exit)
	ExitWorker(ctx echo.Context) error
	// List all machines
	// (GET /api/v1/machines)
	ListMachines(ctx echo.Context) error
	// Create a machine
	// (POST /api/v1/machines)
	CreateMachine(ctx echo.Context) error
	// Delete a machine by its ID
	// (DELETE /api/v1/machines/{id})
	DeleteMachine(ctx echo.Context, id string) error
	// Get a specific machine by its ID
	// (GET /api/v1/machines/{id})
	GetMachine(ctx echo.Context, id string) error
	// Start a machine by its ID
	// (POST /api/v1/machines/{id}/start)
	StartMachine(ctx echo.Context, id string) error
	// Stop a machine by its ID
	// (POST /api/v1/machines/{id}/stop)
	StopMachine(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExitWorker converts echo context to params.
func (w *ServerInterfaceWrapper) ExitWorker(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ExitWorker(ctx)
	return err
}

// ListMachines converts echo context to params.
func (w *ServerInterfaceWrapper) ListMachines(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListMachines(ctx)
	return err
}

// CreateMachine converts echo context to params.
func (w *ServerInterfaceWrapper) CreateMachine(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateMachine(ctx)
	return err
}

// DeleteMachine converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMachine(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteMachine(ctx, id)
	return err
}

// GetMachine converts echo context to params.
func (w *ServerInterfaceWrapper) GetMachine(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMachine(ctx, id)
	return err
}

// StartMachine converts echo context to params.
func (w *ServerInterfaceWrapper) StartMachine(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StartMachine(ctx, id)
	return err
}

// StopMachine converts echo context to params.
func (w *ServerInterfaceWrapper) StopMachine(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StopMachine(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/api/v1/exit", wrapper.ExitWorker)
	router.GET(baseURL+"/api/v1/machines", wrapper.ListMachines)
	router.POST(baseURL+"/api/v1/machines", wrapper.CreateMachine)
	router.DELETE(baseURL+"/api/v1/machines/:id", wrapper.DeleteMachine)
	router.GET(baseURL+"/api/v1/machines/:id", wrapper.GetMachine)
	router.POST(baseURL+"/api/v1/machines/:id/start", wrapper.StartMachine)
	router.POST(baseURL+"/api/v1/machines/:id/stop", wrapper.StopMachine)

}

type ExitWorkerRequestObject struct {
}

type ExitWorkerResponseObject interface {
	VisitExitWorkerResponse(w http.ResponseWriter) error
}

type ExitWorker200Response struct {
}

func (response ExitWorker200Response) VisitExitWorkerResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ListMachinesRequestObject struct {
}

type ListMachinesResponseObject interface {
	VisitListMachinesResponse(w http.ResponseWriter) error
}

type ListMachines200JSONResponse struct {
	Machines *[]RavelMachine `json:"machines,omitempty"`
}

func (response ListMachines200JSONResponse) VisitListMachinesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateMachineRequestObject struct {
	Body *CreateMachineJSONRequestBody
}

type CreateMachineResponseObject interface {
	VisitCreateMachineResponse(w http.ResponseWriter) error
}

type CreateMachine201JSONResponse struct {
	MachineId *string `json:"machineId,omitempty"`
}

func (response CreateMachine201JSONResponse) VisitCreateMachineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateMachine400JSONResponse ErrorResponse

func (response CreateMachine400JSONResponse) VisitCreateMachineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMachineRequestObject struct {
	Id string `json:"id"`
}

type DeleteMachineResponseObject interface {
	VisitDeleteMachineResponse(w http.ResponseWriter) error
}

type DeleteMachine204Response struct {
}

func (response DeleteMachine204Response) VisitDeleteMachineResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteMachine404JSONResponse ErrorResponse

func (response DeleteMachine404JSONResponse) VisitDeleteMachineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetMachineRequestObject struct {
	Id string `json:"id"`
}

type GetMachineResponseObject interface {
	VisitGetMachineResponse(w http.ResponseWriter) error
}

type GetMachine200JSONResponse RavelMachine

func (response GetMachine200JSONResponse) VisitGetMachineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMachine404JSONResponse ErrorResponse

func (response GetMachine404JSONResponse) VisitGetMachineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type StartMachineRequestObject struct {
	Id string `json:"id"`
}

type StartMachineResponseObject interface {
	VisitStartMachineResponse(w http.ResponseWriter) error
}

type StartMachine200Response struct {
}

func (response StartMachine200Response) VisitStartMachineResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type StartMachine404JSONResponse ErrorResponse

func (response StartMachine404JSONResponse) VisitStartMachineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type StopMachineRequestObject struct {
	Id string `json:"id"`
}

type StopMachineResponseObject interface {
	VisitStopMachineResponse(w http.ResponseWriter) error
}

type StopMachine200Response struct {
}

func (response StopMachine200Response) VisitStopMachineResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type StopMachine400JSONResponse ErrorResponse

func (response StopMachine400JSONResponse) VisitStopMachineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type StopMachine404JSONResponse ErrorResponse

func (response StopMachine404JSONResponse) VisitStopMachineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Exit worker
	// (POST /api/v1/exit)
	ExitWorker(ctx context.Context, request ExitWorkerRequestObject) (ExitWorkerResponseObject, error)
	// List all machines
	// (GET /api/v1/machines)
	ListMachines(ctx context.Context, request ListMachinesRequestObject) (ListMachinesResponseObject, error)
	// Create a machine
	// (POST /api/v1/machines)
	CreateMachine(ctx context.Context, request CreateMachineRequestObject) (CreateMachineResponseObject, error)
	// Delete a machine by its ID
	// (DELETE /api/v1/machines/{id})
	DeleteMachine(ctx context.Context, request DeleteMachineRequestObject) (DeleteMachineResponseObject, error)
	// Get a specific machine by its ID
	// (GET /api/v1/machines/{id})
	GetMachine(ctx context.Context, request GetMachineRequestObject) (GetMachineResponseObject, error)
	// Start a machine by its ID
	// (POST /api/v1/machines/{id}/start)
	StartMachine(ctx context.Context, request StartMachineRequestObject) (StartMachineResponseObject, error)
	// Stop a machine by its ID
	// (POST /api/v1/machines/{id}/stop)
	StopMachine(ctx context.Context, request StopMachineRequestObject) (StopMachineResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ExitWorker operation middleware
func (sh *strictHandler) ExitWorker(ctx echo.Context) error {
	var request ExitWorkerRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ExitWorker(ctx.Request().Context(), request.(ExitWorkerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExitWorker")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ExitWorkerResponseObject); ok {
		return validResponse.VisitExitWorkerResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ListMachines operation middleware
func (sh *strictHandler) ListMachines(ctx echo.Context) error {
	var request ListMachinesRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListMachines(ctx.Request().Context(), request.(ListMachinesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListMachines")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ListMachinesResponseObject); ok {
		return validResponse.VisitListMachinesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateMachine operation middleware
func (sh *strictHandler) CreateMachine(ctx echo.Context) error {
	var request CreateMachineRequestObject

	var body CreateMachineJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateMachine(ctx.Request().Context(), request.(CreateMachineRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateMachine")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateMachineResponseObject); ok {
		return validResponse.VisitCreateMachineResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteMachine operation middleware
func (sh *strictHandler) DeleteMachine(ctx echo.Context, id string) error {
	var request DeleteMachineRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteMachine(ctx.Request().Context(), request.(DeleteMachineRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteMachine")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteMachineResponseObject); ok {
		return validResponse.VisitDeleteMachineResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetMachine operation middleware
func (sh *strictHandler) GetMachine(ctx echo.Context, id string) error {
	var request GetMachineRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetMachine(ctx.Request().Context(), request.(GetMachineRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMachine")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetMachineResponseObject); ok {
		return validResponse.VisitGetMachineResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// StartMachine operation middleware
func (sh *strictHandler) StartMachine(ctx echo.Context, id string) error {
	var request StartMachineRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.StartMachine(ctx.Request().Context(), request.(StartMachineRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StartMachine")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(StartMachineResponseObject); ok {
		return validResponse.VisitStartMachineResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// StopMachine operation middleware
func (sh *strictHandler) StopMachine(ctx echo.Context, id string) error {
	var request StopMachineRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.StopMachine(ctx.Request().Context(), request.(StopMachineRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StopMachine")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(StopMachineResponseObject); ok {
		return validResponse.VisitStopMachineResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWTW/cNhP+KwTfF+hFsdaN0YNudhwEi8ZFYKPoITACWhp5x5FIhhxuvTH034sh91Pm",
	"2tkCLbYXe0GK8/E888zMk6xNb40GTV5WT9LXM+hV/PneOeOuwVujPfCBdcaCI4R43YP36j5e0MKCrKQn",
	"h/peDkOxOjF3D1CTHAp5rebQXal6hjpjCxv+24CvHVpCo2Ullx+LoPFbAIENaMIWwcli7LCQqJG+NA7n",
	"8CVna6qRUHUifrFlSrTGCZqB6JeRZUw7Y14yfW0M/S273kLN5v7voJWV/F+5IaJcslBuo3bD3/M7UhT8",
	"QS/TC+bFwbeADhpZfWbQx8CNs117W4Z7+wqzN8ucRuz2yzoZkcLHInhoxN3iNbR66I1bZKoknguP30Gg",
	"FlcXspCtcb0iWUnU9MvZxhpqgntwbG5e24ThrrXfQn8HTphWzNFRUJ149+l3/yMmx9jGlFd+1uG/it+a",
	"29240jnHtQsT6NCzO0/KESNVSBe0Tr88GWuBSQRW8pbzLaF6qINDWtxw3SS6zgPNjMPvKjl/ksghzEA1",
	"UXta9Wzj8Y2y+OYrLDZgKIu/wkIOQxRka2JrQOpgo2Yvzj9NGRdwPqV2ejJhFIwFrSzKSr49mZxMZCGt",
	"olmMp1QWy/lpCY9IsbiMj/+5xGKM00ZW8v0j0h/GfY0xumXXiu9/nkwyiIa6Bp9E4UPfKy6uaET8mazw",
	"zcr1EvFo7h4y3j+ip1WKe/zXRhPo+FZZ22EdX5cPPoGchJtps1uukaA/SPly04qVc2qR6818tIvNuejQ",
	"E1fb2vkuTJytUF23dV/soeWdA0Vwta5YFgl4ujDN4iBQDuuSQ9LjDgmnB/mDR9XbDrYYiOk8tLP5Q4Q1",
	"y9K0+aFx+Bzy1bCrI1yN8Kk829B1C/Z2dmANvQTX7lzPBHOhGrHkaUR8YlOodQvKiaR8wmZIiuuA4HlN",
	"XMbzTU1Y5VQPBM7L6vO+NWB6GaeVrGJj2PShNLXWrZdcgGILiDEXt8/q4mz/6pESyLFx9u+xsQpGGxKt",
	"CboZcZLQ3HDCwxTJM2BDke9WH4COBf3JP9IFcjheAinsoBE8mniao9FC3ZlAO0P12Oj9ACSU4O0LW6xz",
	"JO+TYBm3gv0T84avj6oO8j5jGkenwp9GPEU08yp8gSBjX+LH2P8EPXHNPKKRdWQKZh73FEZcwN08T+pH",
	"U6tOpHtZyOA6XsOJbFWWHd/NjKfq7WQykcPt8FcAAAD//1vqvNXJDwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
